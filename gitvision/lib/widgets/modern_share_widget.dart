import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import '../services/theme_provider.dart';
import 'package:provider/provider.dart';
import 'package:url_launcher/url_launcher.dart';

class ModernShareWidget extends StatefulWidget {
  final Map<String, dynamic> playlistData;
  final String githubHandle;

  const ModernShareWidget({
    super.key,
    required this.playlistData,
    required this.githubHandle,
  });

  @override
  State<ModernShareWidget> createState() => _ModernShareWidgetState();
}

class _ModernShareWidgetState extends State<ModernShareWidget>
    with SingleTickerProviderStateMixin {
  late AnimationController _controller;
  late Animation<double> _scaleAnimation;
  String? _sharingPlatform;
  
  @override
  void initState() {
    super.initState();
    _controller = AnimationController(
      duration: const Duration(milliseconds: 300),
      vsync: this,
    );
    _scaleAnimation = CurvedAnimation(
      parent: _controller,
      curve: Curves.easeOutBack,
    );
    _controller.forward();
  }

  @override
  void dispose() {
    _controller.dispose();
    super.dispose();
  }

  String get _shareText {
    final playlist = widget.playlistData['playlist'] as Map<String, dynamic>;
    final mood = playlist['mood'] ?? 'productive';
    final songs = (playlist['songs'] as List?)?.take(3).map((s) => s['title']).join(', ') ?? '';
    
    return '''ðŸŽµ My Coding Eurovision Playlist! 
${mood.toUpperCase()} mood detected in my code âš¡
Featuring: $songs and more
Generated by @GitHubCommunity #WeAreDevs''';
  }

  Future<void> _shareToInstagram() async {
    // Instagram requires a special URL scheme
    final instagramUrl = Uri.parse('instagram://share');
    if (await canLaunchUrl(instagramUrl)) {
      await launchUrl(instagramUrl);
    } else {
      _showErrorSnackBar('Instagram app not found');
    }
  }

  Future<void> _shareToTwitter() async {
    final tweetText = Uri.encodeComponent(_shareText);
    final twitterUrl = Uri.parse('https://twitter.com/intent/tweet?text=$tweetText');
    if (await canLaunchUrl(twitterUrl)) {
      await launchUrl(twitterUrl);
    } else {
      _showErrorSnackBar('Could not open Twitter');
    }
  }

  Future<void> _copyToClipboard() async {
    await Clipboard.setData(ClipboardData(text: _shareText));
    if (mounted) {
      _showSuccessSnackBar('Copied to clipboard!');
    }
  }

  void _showSuccessSnackBar(String message) {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text(message),
        backgroundColor: Colors.green,
        behavior: SnackBarBehavior.floating,
        shape: RoundedRectangleBorder(
          borderRadius: BorderRadius.circular(10),
        ),
      ),
    );
  }

  void _showErrorSnackBar(String message) {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text(message),
        backgroundColor: Colors.red,
        behavior: SnackBarBehavior.floating,
        shape: RoundedRectangleBorder(
          borderRadius: BorderRadius.circular(10),
        ),
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    final themeProvider = Provider.of<ThemeProvider>(context);
    
    return ScaleTransition(
      scale: _scaleAnimation,
      child: Card(
        elevation: 0,
        color: themeProvider.surfaceColor,
        shape: RoundedRectangleBorder(
          borderRadius: BorderRadius.circular(16),
          side: BorderSide(
            color: themeProvider.borderColor,
            width: 1,
          ),
        ),
        child: Padding(
          padding: const EdgeInsets.all(24),
          child: Column(
            mainAxisSize: MainAxisSize.min,
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              const Text(
                'Share Your Eurovision Playlist',
                style: TextStyle(
                  fontSize: 20,
                  fontWeight: FontWeight.bold,
                ),
              ),
              const SizedBox(height: 20),
              Row(
                mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                children: [
                  _ShareButton(
                    icon: Icons.copy,
                    label: 'Copy',
                    color: themeProvider.primaryColor,
                    isLoading: _sharingPlatform == 'copy',
                    onPressed: () async {
                      setState(() => _sharingPlatform = 'copy');
                      await _copyToClipboard();
                      setState(() => _sharingPlatform = null);
                    },
                  ),
                  _ShareButton(
                    icon: Icons.camera_alt,
                    label: 'Instagram',
                    color: const Color(0xFFE1306C),
                    isLoading: _sharingPlatform == 'instagram',
                    onPressed: () async {
                      setState(() => _sharingPlatform = 'instagram');
                      await _shareToInstagram();
                      setState(() => _sharingPlatform = null);
                    },
                  ),
                  _ShareButton(
                    icon: Icons.chat_bubble,
                    label: 'Twitter',
                    color: const Color(0xFF1DA1F2),
                    isLoading: _sharingPlatform == 'twitter',
                    onPressed: () async {
                      setState(() => _sharingPlatform = 'twitter');
                      await _shareToTwitter();
                      setState(() => _sharingPlatform = null);
                    },
                  ),
                ],
              ),
              const SizedBox(height: 24),
              Container(
                padding: const EdgeInsets.all(16),
                decoration: BoxDecoration(
                  color: themeProvider.primaryColor.withValues(alpha: 0.1),
                  borderRadius: BorderRadius.circular(12),
                  border: Border.all(
                    color: themeProvider.primaryColor.withValues(alpha: 0.2),
                  ),
                ),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    const Text(
                      'Preview',
                      style: TextStyle(
                        fontSize: 16,
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                    const SizedBox(height: 8),
                    Text(
                      _shareText,
                      style: TextStyle(
                        color: themeProvider.textColor.withValues(alpha: 0.8),
                        fontSize: 14,
                      ),
                    ),
                  ],
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }
}

class _ShareButton extends StatelessWidget {
  final IconData icon;
  final String label;
  final Color color;
  final VoidCallback onPressed;
  final bool isLoading;

  const _ShareButton({
    required this.icon,
    required this.label,
    required this.color,
    required this.onPressed,
    this.isLoading = false,
  });

  @override
  Widget build(BuildContext context) {
    return Material(
      color: Colors.transparent,
      child: InkWell(
        onTap: isLoading ? null : onPressed,
        borderRadius: BorderRadius.circular(12),
        child: Container(
          width: 80,
          padding: const EdgeInsets.symmetric(vertical: 12),
          child: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              if (isLoading)
                SizedBox(
                  width: 24,
                  height: 24,
                  child: CircularProgressIndicator(
                    strokeWidth: 2,
                    valueColor: AlwaysStoppedAnimation<Color>(color),
                  ),
                )
              else
                Icon(icon, color: color, size: 24),
              const SizedBox(height: 8),
              Text(
                label,
                style: TextStyle(
                  color: color,
                  fontSize: 12,
                  fontWeight: FontWeight.w500,
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }
}
